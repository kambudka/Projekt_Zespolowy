
<script src="//code.jquery.com/jquery-1.11.1.min.js"></script>


@model SystemRezerwacjiKortow.Models.Post

@{
    ViewBag.Title = "Create";
}

<h2>@SystemRezerwacjiKortow.Resources.Texts.AddingPost</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal" >
    <h4>@SystemRezerwacjiKortow.Resources.Texts.Post</h4>
    <hr />

    <div class="container" >
        <div class="row">
            <div class="col-sm-4 col-md-4">
                <div class="panel panel-default">
                    <div class="panel-body-green">
                        <form accept-charset="UTF-8" action="" method="POST">
                            <div class="form-group">
                                @Html.LabelFor(model => model.TitlePL, SystemRezerwacjiKortow.Resources.Texts.TitlePL, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.TitlePL, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.TitlePL, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <h6 class="pull-right" id="counter">@SystemRezerwacjiKortow.Resources.Texts.CharsRemainingTitle</h6>
                            <br />
                            <div class="form-group">
                                @Html.LabelFor(model => model.DescriptionPL, SystemRezerwacjiKortow.Resources.Texts.DescriptionPL, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.TextAreaFor(model => model.DescriptionPL, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.DescriptionPL, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <h6 class="pull-right" id="counter">@SystemRezerwacjiKortow.Resources.Texts.CharsRemainingContent</h6>
                            <br /><br />

                            <div class="form-group">
                                @Html.LabelFor(model => model.TitleEN, SystemRezerwacjiKortow.Resources.Texts.TitleEN, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.TitleEN, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.TitleEN, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <h6 class="pull-right" id="counter">@SystemRezerwacjiKortow.Resources.Texts.CharsRemainingTitle</h6>

                            <br />
                            <div class="form-group">
                                @Html.LabelFor(model => model.DescriptionEN, SystemRezerwacjiKortow.Resources.Texts.DescriptionEN, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.TextAreaFor(model => model.DescriptionEN, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.DescriptionPL, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <h6 class="pull-right" id="counter">@SystemRezerwacjiKortow.Resources.Texts.CharsRemainingContent</h6>
                            <br /><br />

                            <div class="form-group">
                                @Html.LabelFor(model => model.TitleDE, SystemRezerwacjiKortow.Resources.Texts.TitleDE, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.TitleDE, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.TitleDE, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <h6 class="pull-right" id="counter">@SystemRezerwacjiKortow.Resources.Texts.CharsRemainingTitle</h6>

                            <br />
                            <div class="form-group">
                                @Html.LabelFor(model => model.DescriptionDE, SystemRezerwacjiKortow.Resources.Texts.DescriptionDE, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.TextAreaFor(model => model.DescriptionDE, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.DescriptionDE, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <h6 class="pull-right" id="counter">@SystemRezerwacjiKortow.Resources.Texts.CharsRemainingContent</h6>
                            <br /><br />

                            <input type="submit" value=@SystemRezerwacjiKortow.Resources.Texts.Publish class="btn btn-info" />
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })


</div>
}

<div>
    @Html.ActionLink(SystemRezerwacjiKortow.Resources.Texts.ReturnToList, "Index")
</div>
<script>
    (function ($) {
        /**
         * attaches a character counter to each textarea element in the jQuery object
         * usage: $("#myTextArea").charCounter(max, settings);
         */

        $.fn.charCounter = function (max, settings) {
            max = max || 100;
            settings = $.extend({
                container: "<span></span>",
                classname: "charcounter",
                format: "(%1 characters remaining)",
                pulse: true,
                delay: 0
            }, settings);
            var p, timeout;

            function count(el, container) {
                el = $(el);
                if (el.val().length > max) {
                    el.val(el.val().substring(0, max));
                    if (settings.pulse && !p) {
                        pulse(container, true);
                    };
                };
                if (settings.delay > 0) {
                    if (timeout) {
                        window.clearTimeout(timeout);
                    }
                    timeout = window.setTimeout(function () {
                        container.html(settings.format.replace(/%1/, (max - el.val().length)));
                    }, settings.delay);
                } else {
                    container.html(settings.format.replace(/%1/, (max - el.val().length)));
                }
            };

            function pulse(el, again) {
                if (p) {
                    window.clearTimeout(p);
                    p = null;
                };
                el.animate({ opacity: 0.1 }, 100, function () {
                    $(this).animate({ opacity: 1.0 }, 100);
                });
                if (again) {
                    p = window.setTimeout(function () { pulse(el) }, 200);
                };
            };

            return this.each(function () {
                var container;
                if (!settings.container.match(/^<.+>$/)) {
                    // use existing element to hold counter message
                    container = $(settings.container);
                } else {
                    // append element to hold counter message (clean up old element first)
                    $(this).next("." + settings.classname).remove();
                    container = $(settings.container)
                        .insertAfter(this)
                        .addClass(settings.classname);
                }
                $(this)
                    .unbind(".charCounter")
                    .bind("keydown.charCounter", function () { count(this, container); })
                    .bind("keypress.charCounter", function () { count(this, container); })
                    .bind("keyup.charCounter", function () { count(this, container); })
                    .bind("focus.charCounter", function () { count(this, container); })
                    .bind("mouseover.charCounter", function () { count(this, container); })
                    .bind("mouseout.charCounter", function () { count(this, container); })
                    .bind("paste.charCounter", function () {
                        var me = this;
                        setTimeout(function () { count(me, container); }, 10);
                    });
                if (this.addEventListener) {
                    this.addEventListener('input', function () { count(this, container); }, false);
                };
                count(this, container);
            });
        };

</script>